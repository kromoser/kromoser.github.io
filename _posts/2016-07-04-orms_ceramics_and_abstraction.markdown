---
layout: post
title:  "ORMs, Ceramics, and Abstraction"
date:   2016-07-04 20:35:18 +0000
---


If I'm not learning to code or working, I'm sitting at a potter's wheel, making bottles, bowls, pitchers,  [pens](https://www.instagram.com/p/BGPiViaoc1O/?taken-by=kevinromoser), and recently, I have started to learn a new technique for throwing plates. At the same time, I've been learning about making and using dynamic ORMs in Ruby. And of course, abstraction is always an important concept in coding, but in this area, it really clicked as an essential part of building something useful and extending its utility into the future. And today, when I was practicing my new plate-throwing technique, I thought about the idea of abstraction and how a similar principle applies to any craft with its own opportunities for creativity and foundation of conventions.

In programming, we ultimately want to build out very specific, actual things that are new and exciting and haven't been built before. But to do so, we have to build out other things that are not new and <i>have</i> been built many times before, like a dynamic ORM, in the form of something like ActiveRecord. We need it to be dynamic, so we don't have to keep building it over and over again every time we need it. We don't want to have to re-invent the wheel with every project, even though the end result of every project will be something novel.

Similarly, in ceramics, even if you try really hard to make the same plate again and again, every one will be different. That's the beauty of it. And usually, you don't want to make the same thing again anyway. You want to make a big round dinner plate and a wide traditional rim, and then later you want to make a pasta dish, with just a small, subtle rim. And maybe you then want to make a salad plate with a medium rim and exaggerated foot ring on the bottom. They're all different forms that require different movements of the potter's hand, arm, head, and foot, but like programming, these movements, think of them as discrete functions, are built on convention, and they can be abstracted. The potter can extend just a few basic movements and create an unlimited number of forms. First, the potter centers the clay. Then she opens the clay up, makes the first pull, re-inforces the rim of the pot, makes another pull, shapes it, finishes it, and cuts it off the wheel. The potter doesn't think of the first step as "I must now center this soon-to-be-a-wide-platter-with-a-thick-rolled-lip." She thinks "In order to make a pot, I must center the clay," and through a series of abstracted, dynamic movements, the clay comes closer and closer to the desired form.

It's important for the potter, like the developer, to be able to think of each movement or function abstractly and discretely because there are simply too many variables to be able to view every project as something specific only to itself. And maybe this extends to everything we do. Imagine the anxiety we'd feel if we had to consider every detail of every step we took, every line of code of our lives. Instead, we think abstractly, break things down into dynamic functions, keeping in mind convention, but also looking to the future. 

